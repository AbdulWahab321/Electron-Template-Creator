# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'F:\Electron Template Creator\etc.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import os

def FileDialog(directory='', forOpen=True, fmt='', isFolder=False):
		options = QFileDialog.Options()
		options |= QFileDialog.DontUseCustomDirectoryIcons
		dialog = QFileDialog(caption="Open Folder")
		dialog.setOptions(options)
		dialog.setFilter(dialog.filter() | QDir.Hidden)
		# ARE WE TALKING ABOUT FILES OR FOLDERS
		if isFolder:
		    dialog.setFileMode(QFileDialog.DirectoryOnly)
		else:
		    dialog.setFileMode(QFileDialog.AnyFile)
		# OPENING OR SAVING:
		dialog.setAcceptMode(QFileDialog.AcceptOpen) if forOpen else dialog.setAcceptMode(QFileDialog.AcceptSave)
		# SET FORMAT, IF SPECIFIED
		if fmt != '' and isFolder is False:
		    dialog.setDefaultSuffix(fmt)
		    dialog.setNameFilters([f'{fmt} (*.{fmt})'])
		# SET THE STARTING DIRECTORY
		if directory != '':
		    dialog.setDirectory(str(directory))
		else:
		    dialog.setDirectory(str(os.path.dirname(__file__)))
		if dialog.exec_() == QDialog.Accepted:
		    path = dialog.selectedFiles()[0]  # returns a list
		    return path
		else:
		    return ''
def writePackageJson(path_of_pro,name,version,desc,author):
    path_of_pro = os.path.join(path_of_pro,"package.json")
    open(path_of_pro,"w").write("{")
    open(path_of_pro,"a").write(f'    "name":"{name}","version":"{version}","description":"{desc}","main":"index.js","author":"{author}",')
    open(path_of_pro,"a").write("""
    "scripts": {
        "start": "electron .",
        "test":"echo \\"Error: no test specified\\" && exit 1"
    },  
    "license": "ISC",
    "package": "electron-packager .",
    "devDependencies": {
        "electron": "^5.0.13",
        "electron-packager": "^15.4.0"
    }
    }                                
""")
def writeIndexJs(pth_of_pro):
    pth_of_pro = os.path.join(pth_of_pro,"index.js")
    open(pth_of_pro,"w").write("""
const { app, BrowserWindow } = require("electron");
function createWindow() {
    // Create the browser window.
    let win = new BrowserWindow({
        width: 800,
        height: 600,
        webPreferences: {
            nodeIntegration: true
        }
    });
    // and load the index.html of the app.
    win.loadFile("index.html");
}
app.on("ready", createWindow);
""")    
def writeIndexHtml(pth_of_pro):
    pth_of_pro = os.path.join(pth_of_pro,"index.html")
    open(pth_of_pro, "w").write("""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    
</body>
</html>
""")    
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(532, 649)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(200, 162, 211, 41))
        self.lineEdit.setObjectName("lineEdit")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(100, 160, 121, 41))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(40, 0, 481, 71))
        self.label_4.setObjectName("label_4")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(200, 222, 211, 41))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(90, 220, 121, 41))
        self.label_5.setObjectName("label_5")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(200, 342, 211, 41))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(90, 340, 121, 41))
        self.label_6.setObjectName("label_6")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(200, 282, 211, 41))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(70, 280, 131, 41))
        self.label_7.setObjectName("label_7")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(100, 530, 371, 61))
        self.pushButton.setObjectName("pushButton")
        self.lineEdit_7 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_7.setGeometry(QtCore.QRect(200, 102, 211, 41))
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.file_dialog = QtWidgets.QPushButton(self.centralwidget)
        self.file_dialog.setGeometry(QtCore.QRect(410, 102, 81, 41))
        self.file_dialog.setObjectName("file_dialog")
        self.file_dialog.clicked.connect(self.open_dialog)
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(10, 100, 211, 41))
        self.label_10.setObjectName("label_10")
        self.pth_of_pro = self.lineEdit_7
        self.name = self.lineEdit
        self.version = self.lineEdit_2
        self.description = self.lineEdit_4
        self.author = self.lineEdit_3
        self.createbtn = self.pushButton
        self.createbtn.clicked.connect(self.createTemplate)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 532, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def createTemplate(self):
        pth_pro = self.pth_of_pro.text()
        name = self.name.text()
        version = self.version.text()
        desc = self.description.text()
        author = self.author.text()
        data = {
            "html":False,
            "js":False,
            "json":False
            }
        
        writePackageJson(pth_pro,name,version,desc,author)
        writeIndexJs(pth_pro)
        writeIndexHtml(pth_pro)
        def rpth(file):
            return os.path.join(pth_pro,file)
        if os.path.exists(rpth("index.html")):
            data.update({"html":True})
        if os.path.exists(rpth("index.js")):
            data.update({"js":True}) 
        if os.path.exists(rpth("package.json")):
            data.update({"json":True})
        inht = rpth("index.html")
        injs = rpth("index.js")
        pckjson = rpth("package.json")
        drv = os.path.splitdrive(pth_pro)[0]
        pth = os.path.splitdrive(pth_pro)[1]    
        if data.get("html") == False:
            QMessageBox.about(self.centralwidget, "Failed To Create", f"Failed to create file: {inht}")
        if data.get("js") == False:
            QMessageBox.about(self.centralwidget, "Failed To Create", f"Failed to create file: {injs}")
        if data.get("json") == False:
            QMessageBox.about(self.centralwidget, "Failed To Create", f"Failed to create file: {pckjson}")                   
        if data.get("json") == True and data.get("js") == True and data.get("html") == True:
            QMessageBox.about(self.centralwidget, "Successful", f"Successfully Created Basic Template..")
            QMessageBox.about(self.centralwidget, "Proccessing...", f"Installing Electron....")
            os.system(f'{drv}&&cd {pth}&&npm install electron --save-dev')
            QMessageBox.about(self.centralwidget, "Proccessing...", f"Successfully Electron....")
            QMessageBox.about(self.centralwidget, "Proccessing...", f"Installing Electron Packager....")
            os.system(f"{drv}&&cd {pth}&&npm install electron-packager --save-dev") 
            QMessageBox.about(self.centralwidget, "Proccessing...", f"Successfully Electron Packager....")               
    def open_dialog(self):
        fd = FileDialog(isFolder=True)
        self.pth_of_pro.setText(fd)
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_3.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:18pt;\">Name:</span></p></body></html>"))
        self.label_4.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:28pt;\">Electron.js Template Creator</span></p></body></html>"))
        self.label_5.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:18pt;\">Version:</span></p></body></html>"))
        self.label_6.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:18pt;\">Author:</span></p></body></html>"))
        self.label_7.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:18pt;\">Description:</span></p></body></html>"))
        self.pushButton.setText(_translate("MainWindow", "Create Template"))
        self.file_dialog.setText(_translate("MainWindow", "..."))
        self.label_10.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:18pt;\">Path of Project:</span></p></body></html>"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
